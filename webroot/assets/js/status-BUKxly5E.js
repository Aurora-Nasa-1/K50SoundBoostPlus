import{C as t}from"./core-CSZe8cb_.js";import{M as e,I as n}from"./main-CQLp2XMv.js";const s={config:null,moduleStatus:"UNKNOWN",refreshTimer:null,deviceInfo:{},moduleInfo:{},version:null,logCount:0,currentVersion:"20250704",GitHubRepo:"Aurora-Nasa-1/K50SoundBoostPlus",latestVersion:null,updateAvailable:!1,updateChecking:!1,CACHE_KEYS:{MODULE_INFO:"status_module_info",DEVICE_INFO:"status_device_info",LOG_COUNT:"status_log_count"},CACHE_DURATION:{MODULE_INFO:3e5,DEVICE_INFO:6e5,LOG_COUNT:3e4},async init(t){return this.ui=t,this.registerActions(),this.boundLanguageHandler=this.onLanguageChanged.bind(this),document.addEventListener("languageChanged",this.boundLanguageHandler),this.loadCachedData(),this.loadDataAsync(),!0},loadCachedData(){const t=this.getCachedData(this.CACHE_KEYS.MODULE_INFO);t&&(this.moduleInfo=t,this.version=this.moduleInfo.version||"Unknown");const e=this.getCachedData(this.CACHE_KEYS.DEVICE_INFO);e&&(this.deviceInfo=e);const n=this.getCachedData(this.CACHE_KEYS.LOG_COUNT);null!==n&&(this.logCount=n)},async loadDataAsync(){const t=[this.loadModuleInfoWithCache(),this.loadDeviceInfoWithCache(),this.getLogCountWithCache(),this.loadModuleStatus()];Promise.allSettled(t).then(()=>this.updatePageIfActive()),setTimeout(()=>{this.startAutoRefresh(),this.checkUpdate()},100)},async loadModuleInfoWithCache(){const t=this.getCachedData(this.CACHE_KEYS.MODULE_INFO);if(t)return this.moduleInfo=t,void(this.version=this.moduleInfo.version||"Unknown");await this.loadModuleInfo(),this.setCachedData(this.CACHE_KEYS.MODULE_INFO,this.moduleInfo)},async loadModuleInfo(){try{const e=await t.execCommand(`cat "${t.MODULE_PATH}module.prop"`);if(e){const t={};e.split("\n").forEach(e=>{const n=e.split("=");n.length>=2&&(t[n[0].trim()]=n.slice(1).join("=").trim())}),this.moduleInfo=t,this.version=t.version||"Unknown"}else this.moduleInfo={},this.version="Unknown"}catch(e){this.moduleInfo={},this.version="Unknown"}},async getLogCountWithCache(){const t=this.getCachedData(this.CACHE_KEYS.LOG_COUNT);null===t?(await this.getLogCount(),this.setCachedData(this.CACHE_KEYS.LOG_COUNT,this.logCount)):this.logCount=t},async getLogCount(){try{const e=await t.execCommand(`find "${t.MODULE_PATH}logs/" -type f -name "*.log" | wc -l 2>/dev/null || echo "0"`);this.logCount=parseInt(e.trim())||0}catch(e){this.logCount=0}},async loadDeviceInfoWithCache(){const t=this.getCachedData(this.CACHE_KEYS.DEVICE_INFO);t?this.deviceInfo=t:(await this.loadDeviceInfo(),this.setCachedData(this.CACHE_KEYS.DEVICE_INFO,this.deviceInfo))},async loadDeviceInfo(){try{const e={model:"getprop ro.product.model",android:"getprop ro.build.version.release",kernel:"uname -r",device_abi:"getprop ro.product.cpu.abi"},[n,s]=await Promise.all([t.execCommandsParallelMap(e),this.getRootImplementation()]);this.deviceInfo={model:n.model?.result?.trim()||"Unknown",android:n.android?.result?.trim()||"Unknown",kernel:n.kernel?.result?.trim()||"Unknown",device_abi:n.device_abi?.result?.trim()||"Unknown",root:s}}catch(e){this.deviceInfo={model:await this.getDeviceModel(),android:await this.getAndroidVersion(),kernel:await this.getKernelVersion(),root:await this.getRootImplementation(),device_abi:await this.getDeviceABI()}}},async getDeviceModel(){try{return(await t.execCommand("getprop ro.product.model")).trim()||"Unknown"}catch(e){return"Unknown"}},async getAndroidVersion(){try{return(await t.execCommand("getprop ro.build.version.release")).trim()||"Unknown"}catch(e){return"Unknown"}},async getDeviceABI(){try{return(await t.execCommand("getprop ro.product.cpu.abi")).trim()||"Unknown"}catch(e){return"Unknown"}},async getKernelVersion(){try{return(await t.execCommand("uname -r")).trim()||"Unknown"}catch(e){return"Unknown"}},async getRootImplementation(){try{const e={magisk_check:'[ -e "/data/adb/magisk" ] && echo "true" || echo "false"',magisk_version:'magisk -v 2>/dev/null || echo "not found"',kernelsu:'ksu -V 2>/dev/null || ksud -V 2>/dev/null || echo "not found"',apatch:'apd -V 2>/dev/null || echo "not found"',su_check:'which su 2>/dev/null || command -v su 2>/dev/null || echo "not found"'},n=await t.execCommandsParallelMap(e);let s=[];if("true"===n.magisk_check?.result?.trim()){const t=n.magisk_version?.result;if(t&&!t.includes("not found")){const e=t.trim().split(":")[0];s.push(e?`Magisk ${e}`:"Magisk")}else s.push("Magisk")}const a=n.kernelsu?.result;a&&!a.includes("not found")&&s.push(`KernelSU ${a.trim()}`);const i=n.apatch?.result;i&&!i.includes("not found")&&s.push(`APatch ${i.trim()}`);const o=n.su_check?.result;return!o||o.includes("not found")||s.length||s.push("Root (Unknown)"),s.length?s.join(" + "):"No Root"}catch(e){return"Unknown"}},async loadModuleStatus(){try{const e=`${t.MODULE_PATH}status.txt`,n={file_exists:`[ -f "${e}" ] && echo "true" || echo "false"`,status_content:`cat "${e}" 2>/dev/null || echo "UNKNOWN"`,process_check:`ps -ef | grep "${t.MODULE_PATH}service.sh" | grep -v grep | wc -l`},s=await t.execCommandsParallelMap(n);if(!("true"===s.file_exists?.result?.trim()))return void(this.moduleStatus="UNKNOWN");const a=s.status_content?.result?.trim()||"UNKNOWN";if("UNKNOWN"===a)return void(this.moduleStatus="UNKNOWN");const i=parseInt(s.process_check?.result?.trim()||"0");if("RUNNING"===a&&!(i>0))return void(this.moduleStatus="STOPPED");this.moduleStatus=a}catch(e){this.moduleStatus="ERROR"}},registerActions(){this.ui.registerPageActions("status",[{id:"refresh-status",icon:"refresh",title:n.translate("REFRESH","刷新"),onClick:"refreshStatus"},{id:"run-action",icon:"play_arrow",title:n.translate("RUN_ACTION","运行Action"),onClick:"runAction"}]),this.updateActionButtonTitles()},async prerender(){if(this.loadCachedData(),this.moduleInfo&&Object.keys(this.moduleInfo).length>0)return this.render();try{return await Promise.race([Promise.all([this.loadModuleInfo(),this.loadDeviceInfo(),this.getLogCount()]),new Promise(t=>setTimeout(t,1e3))]),this.render()}catch(t){return this.renderSkeleton()}},renderSkeleton:()=>'\n        <div class="status-page">\n            <div class="status-card module-status-card loading">\n                <div class="status-card-content">\n                    <div class="status-icon-container">\n                        <span class="material-symbols-rounded">hourglass_empty</span>\n                    </div>\n                    <div class="status-info-container">\n                        <div class="status-title-row">\n                            <span class="status-value">加载中...</span>\n                        </div>\n                        <div class="status-details">\n                            <div class="status-detail-row">版本: --</div>\n                            <div class="status-detail-row">最后更新时间: --</div>\n                            <div class="status-detail-row">日志数: --</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="status-card device-info-card">\n                <div class="device-info-grid">\n                    <div class="device-info-item"><span class="device-info-label">设备型号:</span><span class="device-info-value">--</span></div>\n                    <div class="device-info-item"><span class="device-info-label">Android版本:</span><span class="device-info-value">--</span></div>\n                    <div class="device-info-item"><span class="device-info-label">内核版本:</span><span class="device-info-value">--</span></div>\n                    <div class="device-info-item"><span class="device-info-label">架构:</span><span class="device-info-value">--</span></div>\n                </div>\n            </div>\n        </div>',render(){return`\n        <div class="status-page">\n            <div class="update-banner-container">\n                ${this.updateAvailable?this.renderUpdateBanner():""}\n            </div>\n            <div class="status-card module-status-card ${this.getStatusClass()}">\n                <div class="status-card-content">\n                    <div class="status-icon-container">\n                        <span class="material-symbols-rounded">${this.getStatusIcon()}</span>\n                    </div>\n                    <div class="status-info-container">\n                        <div class="status-title-row">\n                            <span class="status-value" data-i18n="${this.getStatusI18nKey()}">${this.getStatusText()}</span>\n                        </div>\n                        <div class="status-details">\n                            <div class="status-detail-row">${n.translate("VERSION","版本")}: ${this.version}</div>\n                            <div class="status-detail-row">${n.translate("UPDATE_TIME","最后更新时间")}: ${(new Date).toLocaleTimeString()}</div>\n                            <div class="status-detail-row">${n.translate("LOG_COUNT","日志数")}: ${this.logCount}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="status-card device-info-card">\n                <div class="device-info-grid">\n                    ${this.renderDeviceInfo()}\n                </div>\n            </div>\n            \x3c!-- Action输出模态窗口 --\x3e\n            <div class="action-output-overlay" id="action-output-overlay" style="display: none;">\n                <div class="action-output-modal">\n                    <div class="action-output-header">\n                        <div class="action-output-title">\n                            <span class="material-symbols-rounded">terminal</span>\n                            <h3>${n.translate("ACTION_OUTPUT","Action输出")}</h3>\n                        </div>\n                        <button class="action-close-btn" id="action-close-btn">\n                            <span class="material-symbols-rounded">close</span>\n                        </button>\n                    </div>\n                    <div class="action-output-content">\n                        <pre id="action-output-text"></pre>\n                    </div>\n                    <div class="action-output-footer">\n                        <button class="action-clear-btn" id="action-clear-btn">\n                            <span class="material-symbols-rounded">delete</span>\n                            ${n.translate("CLEAR_LOGS","清除日志")}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>`},async refreshStatus(e=!1){try{const s=this.moduleStatus,a=JSON.stringify(this.deviceInfo);await Promise.all([this.loadModuleStatus(),this.loadModuleInfo(),this.loadDeviceInfo(),this.getLogCount()]),this.setCachedData(this.CACHE_KEYS.MODULE_INFO,this.moduleInfo),this.setCachedData(this.CACHE_KEYS.DEVICE_INFO,this.deviceInfo),this.setCachedData(this.CACHE_KEYS.LOG_COUNT,this.logCount);const i=JSON.stringify(this.deviceInfo);if(s!==this.moduleStatus||a!==i){const t=document.querySelector(".status-page");t&&(t.innerHTML=this.render(),this.afterRender())}e&&t.showToast(n.translate("STATUS_REFRESHED","状态已刷新"))}catch(s){e&&t.showToast(n.translate("STATUS_REFRESH_ERROR","刷新状态失败"),"error")}},afterRender(){const t=document.getElementById("refresh-status"),e=document.getElementById("run-action");t&&!t.dataset.bound&&(t.addEventListener("click",()=>this.refreshStatus(!0)),t.dataset.bound="true"),e&&!e.dataset.bound&&(e.addEventListener("click",()=>this.runAction()),e.dataset.bound="true")},getStatusI18nKey(){return{RUNNING:"RUNNING",STOPPED:"STOPPED",ERROR:"ERROR",PAUSED:"PAUSED",NORMAL_EXIT:"NORMAL_EXIT"}[this.moduleStatus]||"UNKNOWN"},getStatusClass(){return{RUNNING:"running",STOPPED:"stopped",ERROR:"error",PAUSED:"paused",NORMAL_EXIT:"normal-exit"}[this.moduleStatus]||"unknown"},getStatusIcon(){return{RUNNING:"play_circle",STOPPED:"stop_circle",ERROR:"error",PAUSED:"pause_circle",NORMAL_EXIT:"check_circle"}[this.moduleStatus]||"help"},getStatusText(){return{RUNNING:n.translate("RUNNING","运行中"),STOPPED:n.translate("STOPPED","已停止"),ERROR:n.translate("ERROR","错误"),PAUSED:n.translate("PAUSED","已暂停"),NORMAL_EXIT:n.translate("NORMAL_EXIT","正常退出")}[this.moduleStatus]||n.translate("UNKNOWN","未知")},renderDeviceInfo(){if(!this.deviceInfo||0===Object.keys(this.deviceInfo).length)return'<div class="no-info" data-i18n="NO_DEVICE_INFO">无设备信息</div>';let t="";return[{key:"model",label:"DEVICE_MODEL",icon:"smartphone"},{key:"android",label:"ANDROID_VERSION",icon:"android"},{key:"device_abi",label:"DEVICE_ABI",icon:"architecture"},{key:"kernel",label:"KERNEL_VERSION",icon:"terminal"},{key:"root",label:"ROOT_IMPLEMENTATION",icon:"security"}].forEach(e=>{this.deviceInfo[e.key]&&(t+=`\n                    <div class="device-info-item">\n                        <div class="device-info-icon">\n                            <span class="material-symbols-rounded">${e.icon}</span>\n                        </div>\n                        <div class="device-info-content">\n                            <div class="device-info-label" data-i18n="${e.label}">${n.translate(e.label,e.key)}</div>\n                            <div class="device-info-value">${this.deviceInfo[e.key]}</div>\n                        </div>\n                    </div>`)}),t||'<div class="no-info" data-i18n="NO_DEVICE_INFO">无设备信息</div>'},startAutoRefresh(){this.refreshTimer&&clearInterval(this.refreshTimer),this.refreshTimer=setInterval(()=>this.refreshStatus(),6e4)},stopAutoRefresh(){this.refreshTimer&&(clearInterval(this.refreshTimer),this.refreshTimer=null)},onLanguageChanged(){this.updateActionButtonTitles(),this.updatePageContent()},updatePageContent(){document.querySelector(".status-page")&&document.querySelectorAll("[data-i18n]").forEach(t=>{const e=t.getAttribute("data-i18n");e&&(t.textContent=n.translate(e,t.textContent))})},onDeactivate(){this.boundLanguageHandler&&document.removeEventListener("languageChanged",this.boundLanguageHandler),this.stopAutoRefresh(),this.ui.clearPageActions("status")},updateActionButtonTitles(){const t=document.getElementById("refresh-status"),e=document.getElementById("run-action");t&&(t.title=n.translate("REFRESH","刷新")),e&&(e.title=n.translate("RUN_ACTION","运行Action"))},onActivate(){this.startAutoRefresh(),this.registerActions(),this.moduleStatus&&0!==Object.keys(this.deviceInfo).length||setTimeout(()=>this.refreshStatus(),100)},getCachedData(t){try{const e=sessionStorage.getItem(t);if(!e)return null;const n=JSON.parse(e),s=Date.now();let a;return a=t.includes("MODULE_INFO")?this.CACHE_DURATION.MODULE_INFO:t.includes("DEVICE_INFO")?this.CACHE_DURATION.DEVICE_INFO:t.includes("LOG_COUNT")?this.CACHE_DURATION.LOG_COUNT:3e5,n.timestamp&&s-n.timestamp<a?n.value:(sessionStorage.removeItem(t),null)}catch(e){return null}},setCachedData(t,e){try{const n={value:e,timestamp:Date.now()};sessionStorage.setItem(t,JSON.stringify(n))}catch(n){}},clearCache(){Object.values(this.CACHE_KEYS).forEach(t=>{sessionStorage.removeItem(t)})},updatePageIfActive(){if("status"===this.ui?.router?.currentPage){document.querySelector(".status-page")&&this.updatePageContent()}},async checkUpdate(){if(!this.updateChecking){this.updateChecking=!0;try{const t=await this.getLatestVersion();t?(this.latestVersion=t,this.updateAvailable=parseInt(t.formattedDate)>parseInt(this.currentVersion),this.updateError=null):(this.updateAvailable=!1,this.updateError=null),window.dispatchEvent(new CustomEvent("updateCheckComplete",{detail:{available:this.updateAvailable,version:this.latestVersion}}))}catch(t){this.updateAvailable=!1,this.updateError=t.message}finally{this.updateChecking=!1;const t=document.querySelector(".update-banner-container");t&&(t.innerHTML=this.renderUpdateBanner())}}},renderUpdateBanner(){return this.updateChecking?`\n                <div class="update-banner checking">\n                    <div class="update-info">\n                        <div class="update-icon">\n                            <span class="material-symbols-rounded rotating">sync</span>\n                        </div>\n                        <div class="update-text">\n                            <div class="update-title">${n.translate("CHECKING_UPDATE","正在检查更新...")}</div>\n                        </div>\n                    </div>\n                </div>`:this.updateError?`\n                <div class="update-banner error">\n                    <div class="update-info">\n                        <div class="update-icon">\n                            <span class="material-symbols-rounded">error</span>\n                        </div>\n                        <div class="update-text">\n                            <div class="update-title">${n.translate("UPDATE_CHECK_FAILED","检查更新失败")}</div>\n                            <div class="update-subtitle">${this.updateError}</div>\n                        </div>\n                    </div>\n                </div>`:this.updateAvailable?`\n                <div class="update-banner available">\n                    <div class="update-info">\n                        <div class="update-icon">\n                            <span class="material-symbols-rounded">system_update</span>\n                        </div>\n                        <div class="update-text">\n                            <div class="update-title">${n.translate("UPDATE_AVAILABLE","有新版本可用")}</div>\n                            <div class="update-version">\n                                <span class="version-tag">${this.latestVersion.tagName}</span>\n                                <span class="version-date">${this.formatDate(this.latestVersion.formattedDate)}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <button class="update-button md3-button" onclick="app.OpenUrl('https://github.com/${this.GitHubRepo}/releases/latest', '_blank')">\n                        <span class="material-symbols-rounded">open_in_new</span>\n                        <span>${n.translate("VIEW_UPDATE","查看更新")}</span>\n                    </button>\n                </div>`:""},formatDate(t){if(!t||8!==t.length)return t;return`${t.substring(2,4)}/${t.substring(4,6)}/${t.substring(6,8)}`},async refreshStatus(){try{this.clearCache();const e=document.querySelector(".status-page");e&&e.classList.add("loading"),await Promise.all([this.loadModuleInfo(),this.loadDeviceInfo(),this.getLogCount(),this.loadModuleStatus()]),this.setCachedData(this.CACHE_KEYS.MODULE_INFO,this.moduleInfo),this.setCachedData(this.CACHE_KEYS.DEVICE_INFO,this.deviceInfo),this.setCachedData(this.CACHE_KEYS.LOG_COUNT,this.logCount),this.updatePageContent(),e&&e.classList.remove("loading"),void 0!==t&&t.showToast&&t.showToast(n.translate("STATUS_REFRESHED","状态已刷新"),"success")}catch(e){void 0!==t&&t.showToast&&t.showToast(n.translate("REFRESH_FAILED","刷新失败"),"error")}},async runAction(){try{if(!(await this.showConfirmDialog(n.translate("RUN_ACTION_CONFIRM","确认运行Action"),n.translate("RUN_ACTION_CONFIRM_MSG","这将执行模块的主要功能，是否继续？"))))return;this.showActionOutput(),this.appendActionOutput(n.translate("ACTION_RUNNING","正在执行Action...")+"\n"),void 0!==t&&t.showToast&&t.showToast(n.translate("ACTION_RUNNING","正在执行Action..."),"info"),t.execCommand(`chmod 755 "${t.MODULE_PATH}action.sh"`);const e=await t.execCommand(`sh "${t.MODULE_PATH}action.sh"`);if(!e)throw this.appendActionOutput("\n"+n.translate("ACTION_FAILED","Action执行失败")+"\n"),new Error("Action执行失败");this.appendActionOutput("\n"+n.translate("ACTION_OUTPUT_RESULT","执行结果:")+"\n"),this.appendActionOutput(e+"\n"),this.appendActionOutput("\n"+n.translate("ACTION_SUCCESS","Action执行成功")+"\n"),void 0!==t&&t.showToast&&t.showToast(n.translate("ACTION_SUCCESS","Action执行成功"),"success"),setTimeout(()=>{this.refreshStatus()},1e3)}catch(e){this.appendActionOutput("\n"+n.translate("ACTION_ERROR","错误:")+" "+e.message+"\n"),void 0!==t&&t.showToast&&t.showToast(n.translate("ACTION_FAILED","Action执行失败"),"error")}},showActionOutput(){const t=document.getElementById("action-output-overlay");t&&(t.style.display="flex",this.setupActionOutputEvents(),document.body.style.overflow="hidden")},appendActionOutput(t){const e=document.getElementById("action-output-text");e&&(e.textContent+=t,e.scrollTop=e.scrollHeight)},hideActionOutput(){const t=document.getElementById("action-output-overlay");t&&(t.style.display="none",document.body.style.overflow="")},clearActionOutput(){const t=document.getElementById("action-output-text");t&&(t.textContent="")},setupActionOutputEvents(){const t=document.getElementById("action-close-btn"),e=document.getElementById("action-clear-btn"),n=document.getElementById("action-output-overlay");t&&(t.onclick=()=>this.hideActionOutput()),e&&(e.onclick=()=>this.clearActionOutput()),n&&(n.onclick=t=>{t.target===n&&this.hideActionOutput()});const s=t=>{"Escape"===t.key&&(this.hideActionOutput(),document.removeEventListener("keydown",s))};document.addEventListener("keydown",s)},showConfirmDialog:async(t,n)=>new Promise(s=>{void 0!==e?e.confirm({title:t,content:n,onConfirm:()=>s(!0),onCancel:()=>s(!1)}):s(confirm(`${t}\n\n${n}`))}),async getLatestVersion(){let t=0;for(;t<3;)try{const t=await fetch(`https://api.github.com/repos/${this.GitHubRepo}/releases/latest`);if(!t.ok)throw new Error(`GitHub API请求失败: ${t.status}`);const e=await t.json(),n=e.tag_name,s=new Date(e.published_at);return{tagName:n,formattedDate:s.getFullYear()+String(s.getMonth()+1).padStart(2,"0")+String(s.getDate()).padStart(2,"0")}}catch(e){if(t++,3===t)return null;await new Promise(e=>setTimeout(e,Math.min(1e3*Math.pow(2,t),5e3)))}return null}};export{s as StatusPage};
