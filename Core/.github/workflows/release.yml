name: System Tools Release

# Trigger only on release creation (tag push)
# This workflow builds and releases the binary system tools
on:
  release:
    types: [ created ]

jobs:
  build-system-tools:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm64-v8a, x86_64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build ccache
        
    - name: Setup build cache for release
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: release-${{ matrix.arch }}-${{ github.ref_name }}
        max-size: 500M
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r27c
    
    - name: Configure CMake for Release build
      run: |
        export PATH="/usr/lib/ccache:$PATH"
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.arch }} \
          -DANDROID_PLATFORM=android-21 \
          -DBUILD_TESTING=OFF \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_FLAGS_RELEASE="-O3 -DNDEBUG -flto" \
          -DCMAKE_C_FLAGS_RELEASE="-O3 -DNDEBUG -flto"
    
    - name: Build optimized release
      run: cmake --build build --parallel --config Release
    
    - name: Package system tools
      run: |
        mkdir -p artifacts/${{ matrix.arch }}/bin
        mkdir -p artifacts/${{ matrix.arch }}/docs
        
        # Copy system tool binaries
        cp build/src/logger/logger_daemon artifacts/${{ matrix.arch }}/bin/ 2>/dev/null || echo "logger_daemon not found"
        cp build/src/logger/logger_client artifacts/${{ matrix.arch }}/bin/ 2>/dev/null || echo "logger_client not found"
        cp build/src/filewatcher/filewatcher artifacts/${{ matrix.arch }}/bin/ 2>/dev/null || echo "filewatcher not found"
        
        # Strip debug symbols for smaller binaries
        find artifacts/${{ matrix.arch }}/bin/ -type f -executable -exec strip {} \; 2>/dev/null || true
        
        # Create system tools documentation
        cat > artifacts/${{ matrix.arch }}/README.md << 'EOF'
        # AuroraCore System Tools ${{ github.ref_name }}
        
        ## 系统工具 (System Tools)
        
        本包包含AuroraCore的预编译二进制工具，可直接部署到Android设备使用。
        
        ### 包含的工具
        
        - **logger_daemon** - 日志守护进程
        - **logger_client** - 日志客户端
        - **filewatcher** - 文件监控工具
        
        ### 快速使用
        
        ```bash
        # 部署到设备
        adb push bin/* /data/local/tmp/
        adb shell chmod +x /data/local/tmp/*
        
        # 启动日志服务
        adb shell /data/local/tmp/logger_daemon -f /data/logs/app.log &
        
        # 发送日志
        adb shell /data/local/tmp/logger_client "Hello AuroraCore!"
        
        # 监控文件
        adb shell /data/local/tmp/filewatcher /data/config "echo File changed" &
        ```
        
        ### 文档链接
        
        - [系统工具完整指南](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/guide/system-tools.md)
        - [开发API指南](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/guide/development-api.md)
        
        EOF
        
        # Create version info file
        cat > artifacts/${{ matrix.arch }}/VERSION << EOF
        AuroraCore System Tools Release ${{ github.ref_name }}
        Architecture: ${{ matrix.arch }}
        Build Date: $(date -u)
        Commit: ${{ github.sha }}
        
        Components:
        - Logger Daemon: High-performance logging service
        - Logger Client: Command-line logging client
        - File Watcher: Real-time file system monitoring
        
        For development APIs, please visit:
        https://github.com/APMMDEVS/AuroraCore/tree/main/src
        EOF
    
    - name: Upload system tools artifacts
      uses: actions/upload-artifact@v4
      with:
        name: system-tools-${{ matrix.arch }}
        path: artifacts/
        retention-days: 30

  create-system-tools-packages:
    needs: build-system-tools
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create system tools packages
      run: |
        mkdir -p release
        
        # Create ARM64 system tools package
        if [ -d "artifacts/system-tools-arm64-v8a" ]; then
          cd artifacts/system-tools-arm64-v8a
          tar -czf ../../release/AuroraCore-SystemTools-${{ github.ref_name }}-arm64-v8a.tar.gz arm64-v8a/
          cd ../..
        fi
        
        # Create x86_64 system tools package
        if [ -d "artifacts/system-tools-x86_64" ]; then
          cd artifacts/system-tools-x86_64
          tar -czf ../../release/AuroraCore-SystemTools-${{ github.ref_name }}-x86_64.tar.gz x86_64/
          cd ../..
        fi
        
        # Create combined package with both architectures
        tar -czf release/AuroraCore-SystemTools-${{ github.ref_name }}-all-architectures.tar.gz \
          -C artifacts/ \
          system-tools-arm64-v8a/arm64-v8a/ \
          system-tools-x86_64/x86_64/ 2>/dev/null || true
        
        # Create API development package (header files only)
        mkdir -p api-package/AuroraCore
        cp -r ../src/loggerAPI api-package/AuroraCore/
        cp -r ../src/filewatcherAPI api-package/AuroraCore/
        cp ../CMakeLists.txt api-package/AuroraCore/
        
        # Create API documentation
        cat > api-package/README.md << 'EOF'
        # AuroraCore Development APIs ${{ github.ref_name }}
        
        ## 开发API (Development APIs)
        
        本包包含AuroraCore的C++头文件库，用于开发自定义应用程序。
        
        ### 包含的API
        
        - **LoggerAPI** (`loggerAPI/logger_api.hpp`) - 高性能日志记录库
        - **FileWatcherAPI** (`filewatcherAPI/filewatcher_api.hpp`) - 文件系统监控库
        
        ### 快速集成
        
        ```cpp
        #include "AuroraCore/loggerAPI/logger_api.hpp"
        #include "AuroraCore/filewatcherAPI/filewatcher_api.hpp"
        
        int main() {
            // 使用LoggerAPI
            LoggerAPI::InternalLogger::Config config;
            config.log_path = "/data/local/tmp/app.log";
            LoggerAPI::InternalLogger logger(config);
            logger.log(LoggerAPI::LogLevel::INFO, "Hello AuroraCore!");
            
            // 使用FileWatcherAPI
            FileWatcherAPI::FileWatcher watcher;
            watcher.add_watch("/data/config", [](const auto& event) {
                std::cout << "File changed: " << event.filename << std::endl;
            });
            watcher.start();
            
            return 0;
        }
        ```
        
        ### 文档链接
        
        - [开发API完整指南](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/guide/development-api.md)
        - [API参考文档](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/api/)
        
        EOF
        
        tar -czf release/AuroraCore-DevelopmentAPI-${{ github.ref_name }}.tar.gz -C api-package .
        
        # Generate checksums
        cd release
        sha256sum *.tar.gz > checksums.sha256
        cd ..
        
        # List created packages
        echo "Created packages:"
        ls -la release/
    
    - name: Upload packages to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.tar.gz
          release/checksums.sha256
        body: |
          ## AuroraCore Release ${{ github.ref_name }}
          
          ### 🔧 系统工具 (System Tools)
          即用型二进制文件，直接部署到Android设备使用：
          - `AuroraCore-SystemTools-${{ github.ref_name }}-arm64-v8a.tar.gz` - ARM64 Android二进制文件
          - `AuroraCore-SystemTools-${{ github.ref_name }}-x86_64.tar.gz` - x86_64 Android二进制文件
          - `AuroraCore-SystemTools-${{ github.ref_name }}-all-architectures.tar.gz` - 全架构合并包
          
          ### 🛠️ 开发API (Development APIs)
          C++头文件库，用于开发自定义应用程序：
          - `AuroraCore-DevelopmentAPI-${{ github.ref_name }}.tar.gz` - 开发API头文件包
          
          ### 📋 包含组件
          
          **系统工具：**
          - `logger_daemon` - 高性能日志守护进程
          - `logger_client` - 命令行日志客户端
          - `filewatcher` - 实时文件系统监控工具
          
          **开发API：**
          - `LoggerAPI` - 日志记录C++库
          - `FileWatcherAPI` - 文件监控C++库
          
          ### 🚀 快速开始
          
          **使用系统工具：**
          ```bash
          # 下载并部署
          wget https://github.com/APMMDEVS/AuroraCore/releases/download/${{ github.ref_name }}/AuroraCore-SystemTools-${{ github.ref_name }}-arm64-v8a.tar.gz
          tar -xzf AuroraCore-SystemTools-${{ github.ref_name }}-arm64-v8a.tar.gz
          adb push arm64-v8a/bin/* /data/local/tmp/
          adb shell chmod +x /data/local/tmp/*
          ```
          
          **使用开发API：**
          ```bash
          # 下载API头文件
          wget https://github.com/APMMDEVS/AuroraCore/releases/download/${{ github.ref_name }}/AuroraCore-DevelopmentAPI-${{ github.ref_name }}.tar.gz
          tar -xzf AuroraCore-DevelopmentAPI-${{ github.ref_name }}.tar.gz
          # 在项目中包含头文件
          #include "AuroraCore/loggerAPI/logger_api.hpp"
          ```
          
          ### 📖 文档
          - [系统工具使用指南](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/guide/system-tools.md)
          - [开发API指南](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/guide/development-api.md)
          - [完整文档](https://github.com/APMMDEVS/AuroraCore/blob/main/docs/)
          
          ### 🔧 构建信息
          - **提交**: ${{ github.sha }}
          - **构建日期**: ${{ github.run_started_at }}
          - **Android NDK**: r27c
          - **最低Android API**: 21
          
          ### ✅ 完整性验证
          ```bash
          sha256sum -c checksums.sha256
          ```
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification job for release completion
  release-notification:
    needs: create-system-tools-packages
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Release status summary
      run: |
        if [[ "${{ needs.create-system-tools-packages.result }}" == "success" ]]; then
          echo "🎉 AuroraCore ${{ github.ref_name }} 系统工具和开发API已成功构建并发布！"
          echo "📦 系统工具: 即用型二进制文件，可直接部署到Android设备"
          echo "🛠️ 开发API: C++头文件库，用于开发自定义应用程序"
          echo "📖 发布页面: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        else
          echo "❌ Release build failed for ${{ github.ref_name }}"
          exit 1
        fi